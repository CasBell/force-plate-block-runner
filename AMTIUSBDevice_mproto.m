function [methodinfo,structs,enuminfo,ThunkLibName]=AMTIUSBDevice_mproto
%AMTIUSBDEVICE_MPROTO Create structures to define interfaces found in 'AMTIUSBDeviceDefinitions'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Fri Jun 17 16:03:43 2016
%perl options:'AMTIUSBDeviceDefinitions.i -outfile=AMTIUSBDevice_mproto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int fmDLLGetVersionID ( void ); 
fcns.name{fcnNum}='fmDLLGetVersionID'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmDLLInit ( void ); 
fcns.name{fcnNum}='fmDLLInit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmDLLIsDeviceInitComplete ( void ); 
fcns.name{fcnNum}='fmDLLIsDeviceInitComplete'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmDLLSetupCheck ( void ); 
fcns.name{fcnNum}='fmDLLSetupCheck'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmDLLSetUSBPacketSize ( int size ); 
fcns.name{fcnNum}='fmDLLSetUSBPacketSize'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLGetDeviceCount ( void ); 
fcns.name{fcnNum}='fmDLLGetDeviceCount'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmDLLSelectDeviceIndex ( int index ); 
fcns.name{fcnNum}='fmDLLSelectDeviceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLGetDeviceIndex ( void ); 
fcns.name{fcnNum}='fmDLLGetDeviceIndex'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmDLLSaveConfiguration ( void ); 
fcns.name{fcnNum}='fmDLLSaveConfiguration'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmDLLShutDown ( void ); 
fcns.name{fcnNum}='fmDLLShutDown'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmIsDLLShutDown ( void ); 
fcns.name{fcnNum}='fmIsDLLShutDown'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastRunMode ( int mode ); 
fcns.name{fcnNum}='fmBroadcastRunMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLGetRunMode ( void ); 
fcns.name{fcnNum}='fmDLLGetRunMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmGetRunMode ( void ); 
fcns.name{fcnNum}='fmGetRunMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastGenlock ( int mode ); 
fcns.name{fcnNum}='fmBroadcastGenlock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLGetGenlock ( void ); 
fcns.name{fcnNum}='fmDLLGetGenlock'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastAcquisitionRate ( int rate ); 
fcns.name{fcnNum}='fmBroadcastAcquisitionRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLGetAcquisitionRate ( void ); 
fcns.name{fcnNum}='fmDLLGetAcquisitionRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmGetAcquisitionRate ( void ); 
fcns.name{fcnNum}='fmGetAcquisitionRate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastStart ( void ); 
fcns.name{fcnNum}='fmBroadcastStart'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastStop ( void ); 
fcns.name{fcnNum}='fmBroadcastStop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastZero ( void ); 
fcns.name{fcnNum}='fmBroadcastZero'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmDLLPostDataReadyMessages ( int mode ); 
fcns.name{fcnNum}='fmDLLPostDataReadyMessages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void fmDLLPostUserThreadMessages ( unsigned int threadID ); 
fcns.name{fcnNum}='fmDLLPostUserThreadMessages'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% void fmDLLSetDataFormat ( int format ); 
fcns.name{fcnNum}='fmDLLSetDataFormat'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int fmDLLTransferFloatData ( float *& data ); 
fcns.name{fcnNum}='fmDLLTransferFloatData'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtrPtr'};fcnNum=fcnNum+1;
% int fmDLLGetTheFloatDataLBVStyle ( float * data , int size ); 
fcns.name{fcnNum}='fmDLLGetTheFloatDataLBVStyle'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr', 'int32'};fcnNum=fcnNum+1;
% void fmBroadcastResetSoftware ( void ); 
fcns.name{fcnNum}='fmBroadcastResetSoftware'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmResetSoftware ( void ); 
fcns.name{fcnNum}='fmResetSoftware'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastSave ( void ); 
fcns.name{fcnNum}='fmBroadcastSave'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmSave ( void ); 
fcns.name{fcnNum}='fmSave'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmApplyLimited ( void ); 
fcns.name{fcnNum}='fmApplyLimited'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmSetCurrentGains ( long * ldata ); 
fcns.name{fcnNum}='fmSetCurrentGains'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% void fmGetCurrentGains ( long * ldata ); 
fcns.name{fcnNum}='fmGetCurrentGains'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% void fmSetCurrentExcitations ( long * ldata ); 
fcns.name{fcnNum}='fmSetCurrentExcitations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% void fmGetCurrentExcitations ( long * ldata ); 
fcns.name{fcnNum}='fmGetCurrentExcitations'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% void fmSetChannelOffsetsTable ( float * fdata ); 
fcns.name{fcnNum}='fmSetChannelOffsetsTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetChannelOffsetsTable ( float * fdata ); 
fcns.name{fcnNum}='fmGetChannelOffsetsTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetCableLength ( float fdata ); 
fcns.name{fcnNum}='fmSetCableLength'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
% float fmGetCableLength ( void ); 
fcns.name{fcnNum}='fmGetCableLength'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmSetMatrixMode ( long mode ); 
fcns.name{fcnNum}='fmSetMatrixMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% long fmGetMatrixMode ( void ); 
fcns.name{fcnNum}='fmGetMatrixMode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmSetPlatformRotation ( float rotation ); 
fcns.name{fcnNum}='fmSetPlatformRotation'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
% float fmGetPlatformRotation ( void ); 
fcns.name{fcnNum}='fmGetPlatformRotation'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmUpdateMechanicalMaxAndMin ( void ); 
fcns.name{fcnNum}='fmUpdateMechanicalMaxAndMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmGetMechanicalMaxAndMin ( float * data ); 
fcns.name{fcnNum}='fmGetMechanicalMaxAndMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmUpdateAnalogMaxAndMin ( void ); 
fcns.name{fcnNum}='fmUpdateAnalogMaxAndMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmGetAnalogMaxAndMin ( float * data ); 
fcns.name{fcnNum}='fmGetAnalogMaxAndMin'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmDLLSetPlatformOrder ( int * device_map ); 
fcns.name{fcnNum}='fmDLLSetPlatformOrder'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% void fmBroadcastPlatformOrderingThreshold ( float value ); 
fcns.name{fcnNum}='fmBroadcastPlatformOrderingThreshold'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'single'};fcnNum=fcnNum+1;
% void fmDLLStartPlatformOrdering ( void ); 
fcns.name{fcnNum}='fmDLLStartPlatformOrdering'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int fmDLLIsPlatformOrderingComplete ( void ); 
fcns.name{fcnNum}='fmDLLIsPlatformOrderingComplete'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmDLLCancelPlatformOrdering ( void ); 
fcns.name{fcnNum}='fmDLLCancelPlatformOrdering'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long fmGetProductType ( void ); 
fcns.name{fcnNum}='fmGetProductType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmGetAmplifierModelNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmGetAmplifierModelNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmGetAmplifierSerialNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmGetAmplifierSerialNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmGetAmplifierFirmwareVersion ( char * Cdata ); 
fcns.name{fcnNum}='fmGetAmplifierFirmwareVersion'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmGetAmplifierDate ( char * Cdata ); 
fcns.name{fcnNum}='fmGetAmplifierDate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmGetGainTable ( float * data ); 
fcns.name{fcnNum}='fmGetGainTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetExcitationTable ( float * data ); 
fcns.name{fcnNum}='fmGetExcitationTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetDACGainsTable ( float * data ); 
fcns.name{fcnNum}='fmGetDACGainsTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetDACOffsetTable ( float * data ); 
fcns.name{fcnNum}='fmGetDACOffsetTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetDACSensitivityTable ( float * data ); 
fcns.name{fcnNum}='fmSetDACSensitivityTable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetDACSensitivities ( float * data ); 
fcns.name{fcnNum}='fmGetDACSensitivities'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% float fmGetADRef ( void ); 
fcns.name{fcnNum}='fmGetADRef'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmSetPlatformDate ( char * Cdata ); 
fcns.name{fcnNum}='fmSetPlatformDate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void fmGetPlatformDate ( char * Cdata ); 
fcns.name{fcnNum}='fmGetPlatformDate'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmSetPlatformModelNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmSetPlatformModelNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void fmGetPlatformModelNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmGetPlatformModelNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmSetPlatformSerialNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmSetPlatformSerialNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void fmGetPlatformSerialNumber ( char * Cdata ); 
fcns.name{fcnNum}='fmGetPlatformSerialNumber'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr'};fcnNum=fcnNum+1;
% void fmSetPlatformLengthAndWidth ( char * Ldata , char * Wdata ); 
fcns.name{fcnNum}='fmSetPlatformLengthAndWidth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% void fmGetPlatformLengthAndWidth ( char * Ldata , char * Wdata ); 
fcns.name{fcnNum}='fmGetPlatformLengthAndWidth'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int8Ptr', 'int8Ptr'};fcnNum=fcnNum+1;
% void fmSetPlatformXYZOffsets ( float * data ); 
fcns.name{fcnNum}='fmSetPlatformXYZOffsets'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetPlatformXYZOffsets ( float * data ); 
fcns.name{fcnNum}='fmGetPlatformXYZOffsets'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetPlatformCapacity ( float * data ); 
fcns.name{fcnNum}='fmSetPlatformCapacity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetPlatformCapacity ( float * data ); 
fcns.name{fcnNum}='fmGetPlatformCapacity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetPlatformBridgeResistance ( float * data ); 
fcns.name{fcnNum}='fmSetPlatformBridgeResistance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetPlatformBridgeResistance ( float * data ); 
fcns.name{fcnNum}='fmGetPlatformBridgeResistance'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetInvertedSensitivityMatrix ( float * data ); 
fcns.name{fcnNum}='fmSetInvertedSensitivityMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmGetInvertedSensitivityMatrix ( float * data ); 
fcns.name{fcnNum}='fmGetInvertedSensitivityMatrix'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'singlePtr'};fcnNum=fcnNum+1;
% void fmSetBlink ( void ); 
fcns.name{fcnNum}='fmSetBlink'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmResetHardware ( void ); 
fcns.name{fcnNum}='fmResetHardware'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void fmBroadcastResetUSB ( void ); 
fcns.name{fcnNum}='fmBroadcastResetUSB'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long fmBroadcastCheckOptima ( long * data ); 
fcns.name{fcnNum}='fmBroadcastCheckOptima'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% long fmOptimaGetStatus ( void ); 
fcns.name{fcnNum}='fmOptimaGetStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% long fmOptimaDownloadCalFile ( unsigned int flag ); 
fcns.name{fcnNum}='fmOptimaDownloadCalFile'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% long fmIsOptimaDownloadComplete ( void ); 
fcns.name{fcnNum}='fmIsOptimaDownloadComplete'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
methodinfo=fcns;